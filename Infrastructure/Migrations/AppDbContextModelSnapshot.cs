// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Seat", b =>
                {
                    b.Property<long>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SeatId"));

                    b.Property<int>("ColumnNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("ControlledSector")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.HasKey("SeatId");

                    b.HasIndex("ControlledSector");

                    b.ToTable("Seat", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Sector", b =>
                {
                    b.Property<Guid>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ControlledSector")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SectorType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<Guid>("Venue")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SectorId");

                    b.HasIndex("Venue");

                    b.ToTable("Sector", (string)null);

                    b.HasDiscriminator<string>("SectorType").HasValue("Sector");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Venue", b =>
                {
                    b.Property<Guid>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("TotalCapacity")
                        .HasColumnType("bigint");

                    b.Property<int>("VenueType")
                        .HasColumnType("int");

                    b.HasKey("VenueId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("VenueType");

                    b.ToTable("Venue", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.VenueType", b =>
                {
                    b.Property<int>("VenueTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VenueTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VenueTypeId");

                    b.ToTable("VenueType", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ControlledSector", b =>
                {
                    b.HasBaseType("Domain.Entities.Sector");

                    b.Property<long>("SeatCount")
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("Controlled");
                });

            modelBuilder.Entity("Domain.Entities.UncontrolledSector", b =>
                {
                    b.HasBaseType("Domain.Entities.Sector");

                    b.Property<long>("Capacity")
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("Uncontrolled");
                });

            modelBuilder.Entity("Domain.Entities.Seat", b =>
                {
                    b.HasOne("Domain.Entities.ControlledSector", "ControlledSectorNavigation")
                        .WithMany("Seats")
                        .HasForeignKey("ControlledSector")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ControlledSectorNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Sector", b =>
                {
                    b.HasOne("Domain.Entities.Venue", "VenueNavigation")
                        .WithMany("Sectors")
                        .HasForeignKey("Venue")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VenueNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Venue", b =>
                {
                    b.HasOne("Domain.Entities.VenueType", "VenueTypeNavigation")
                        .WithMany("Venues")
                        .HasForeignKey("VenueType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VenueTypeNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Venue", b =>
                {
                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("Domain.Entities.VenueType", b =>
                {
                    b.Navigation("Venues");
                });

            modelBuilder.Entity("Domain.Entities.ControlledSector", b =>
                {
                    b.Navigation("Seats");
                });
#pragma warning restore 612, 618
        }
    }
}
