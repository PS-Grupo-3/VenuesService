// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251029202639_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Seat", b =>
                {
                    b.Property<long>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SeatId"));

                    b.Property<int>("ColumnNumber")
                        .HasColumnType("int");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("SectorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SeatId");

                    b.HasIndex("SectorId");

                    b.ToTable("Seat", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Sector", b =>
                {
                    b.Property<Guid>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<bool>("IsControlled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SeatCount")
                        .HasColumnType("int");

                    b.Property<Guid>("Venue")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SectorId");

                    b.HasIndex("Venue");

                    b.ToTable("Sector", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Venue", b =>
                {
                    b.Property<Guid>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("MapUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("TotalCapacity")
                        .HasColumnType("bigint");

                    b.Property<int>("VenueType")
                        .HasColumnType("int");

                    b.HasKey("VenueId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("VenueType");

                    b.ToTable("Venue", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.VenueType", b =>
                {
                    b.Property<int>("VenueTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VenueTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VenueTypeId");

                    b.ToTable("VenueType", (string)null);

                    b.HasData(
                        new
                        {
                            VenueTypeId = 1,
                            Name = "Stadium"
                        },
                        new
                        {
                            VenueTypeId = 2,
                            Name = "Theater"
                        },
                        new
                        {
                            VenueTypeId = 3,
                            Name = "Field"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Seat", b =>
                {
                    b.HasOne("Domain.Entities.Sector", "SectorNavigation")
                        .WithMany("Seats")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SectorNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Sector", b =>
                {
                    b.HasOne("Domain.Entities.Venue", "VenueNavigation")
                        .WithMany("Sectors")
                        .HasForeignKey("Venue")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VenueNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Venue", b =>
                {
                    b.HasOne("Domain.Entities.VenueType", "VenueTypeNavigation")
                        .WithMany("Venues")
                        .HasForeignKey("VenueType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VenueTypeNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Sector", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Domain.Entities.Venue", b =>
                {
                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("Domain.Entities.VenueType", b =>
                {
                    b.Navigation("Venues");
                });
#pragma warning restore 612, 618
        }
    }
}
